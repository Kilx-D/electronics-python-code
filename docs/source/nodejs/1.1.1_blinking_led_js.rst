1.1.1 Blinking LED
=========================

Introduction
-----------------

In this project, we will learn how to make a blinking LED by programming.
Through your settings, your LED can produce a series of interesting
phenomena. Now, go for it.

Components
------------------

.. image:: img/blinking_led_list.png
    :width: 800
    :align: center

* :ref:`GPIO Extension Board`
* :ref:`Breadboard`
* :ref:`Resistor`
* :ref:`LED`

Schematic Diagram
---------------------

In this experiment, connect a 220Ω resistor to the anode (the long pin
of the LED), then the resistor to 3.3 V, and connect the cathode (the
short pin) of the LED to GPIO17 of Raspberry Pi. Therefore, to turn on
an LED, we need to make GPIO17 low (0V) level. We can get this
phenomenon by programming.

.. image:: img/image48.png
    :width: 800
    :align: center

Experimental Procedures
-----------------------------

**Step 1:** Build the circuit.

.. image:: img/image49.png
    :width: 800
    :align: center

**Step 2:** Go to the folder of the code.

.. raw:: html

   <run></run>

.. code-block::

   cd /home/pi/raphael-kit/nodejs

.. note::
    Change directory to the path of the code in this experiment via ``cd``.

**Step 3:** Run the code

.. raw:: html

   <run></run>

.. code-block::

   sudo node blink.js

.. note::
    Here sudo - superuser do, and python means to run the file by Python.

After the code runs, you will see the LED flashing.

**Step 4:** If you want to edit the code file blink.js,
press ``Ctrl + C`` to stop running the code. Then type the following
command to open blink.js:

.. raw:: html

   <run></run>

.. code-block::

   nano blink.js

.. note::
    nano is a text editor tool. The command is used to open the
    code file blink.js by this tool.

Press ``Ctrl+X`` to exit. If you have modified the code, there will be a
prompt asking whether to save the changes or not. Type in ``Y`` (save)
or ``N`` (don’t save).

Then press ``Enter`` to exit. Type in nano blink.js again to
see the effect after the change.

**Code**

The following is the program code:

.. code-block:: python

   const Gpio = require('pigpio').Gpio;
   const led = new Gpio(17,{mode: Gpio.OUTPUT});

   setInterval(() => {
      led.digitalWrite(led.digitalRead() ^ 1);
   }, 500);

**Code Explanation**

.. code-block:: python

   const Gpio = require('pigpio').Gpio;

Import the Gpio constructor in the pigpio package in this way, and then define a constant ``Gpio`` to represent this constructor.

.. code-block:: python

   const led = new Gpio(17,{mode: Gpio.OUTPUT});

Connect the LED to the GPIO17 of the T-shaped expansion board, set the LedPin mode to output and assign it to the constant ``led``, that is, construct a GPIO17 object ``led``, and its mode is the output mode.

There are two ways to number the IO pins on the Raspberry Pi: BOARD number and BCM number. In our project, we use the BCM number. You need to set each channel used as input or output.
.. code-block:: python

   setInterval(() => {
      led.digitalWrite(led.digitalRead() ^ 1);
   }, 500);

This statement means that `led.digitalWrite(led.digitalRead() ^ 1)` will be executed every 500ms, and the ping port level of the led will be written to 0 or 1 in a cycle, so that the led flashes (when led.digitalRead() =0, 0^1=1, when led.digitalRead()=1, 1^1=0).

Phenomenon Picture
-------------------------

.. image:: img/image54.jpeg
    :width: 800
    :align: center